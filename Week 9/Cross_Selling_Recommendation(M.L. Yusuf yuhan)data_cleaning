{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9f1e99b4",
   "metadata": {},
   "source": [
    "# Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c46a4771",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a83a538",
   "metadata": {},
   "source": [
    "# Loading the data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6787da80",
   "metadata": {},
   "outputs": [],
   "source": [
    "myList= []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff96ac4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#using chunk method to read data because this csv file 2.13GB size large for memory\n",
    "chunkSize = 20000\n",
    "for chunk in pd.read_csv ('Train.csv', chunksize = chunkSize, low_memory= False):\n",
    "    myList.append(chunk)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1244dc86",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#join all chunks together to form a data frame using concat\n",
    "Train_Data = pd.concat(myList, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e66eda37",
   "metadata": {},
   "outputs": [],
   "source": [
    "#t sets the maximum number of columns to be displayed in a Pandas dataframe\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "23db0d0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13647309, 48)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_Data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0aa8d2a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fecha_dato</th>\n",
       "      <th>ncodpers</th>\n",
       "      <th>ind_empleado</th>\n",
       "      <th>pais_residencia</th>\n",
       "      <th>sexo</th>\n",
       "      <th>age</th>\n",
       "      <th>fecha_alta</th>\n",
       "      <th>ind_nuevo</th>\n",
       "      <th>antiguedad</th>\n",
       "      <th>indrel</th>\n",
       "      <th>ult_fec_cli_1t</th>\n",
       "      <th>indrel_1mes</th>\n",
       "      <th>tiprel_1mes</th>\n",
       "      <th>indresi</th>\n",
       "      <th>indext</th>\n",
       "      <th>conyuemp</th>\n",
       "      <th>canal_entrada</th>\n",
       "      <th>indfall</th>\n",
       "      <th>tipodom</th>\n",
       "      <th>cod_prov</th>\n",
       "      <th>nomprov</th>\n",
       "      <th>ind_actividad_cliente</th>\n",
       "      <th>renta</th>\n",
       "      <th>segmento</th>\n",
       "      <th>ind_ahor_fin_ult1</th>\n",
       "      <th>ind_aval_fin_ult1</th>\n",
       "      <th>ind_cco_fin_ult1</th>\n",
       "      <th>ind_cder_fin_ult1</th>\n",
       "      <th>ind_cno_fin_ult1</th>\n",
       "      <th>ind_ctju_fin_ult1</th>\n",
       "      <th>ind_ctma_fin_ult1</th>\n",
       "      <th>ind_ctop_fin_ult1</th>\n",
       "      <th>ind_ctpp_fin_ult1</th>\n",
       "      <th>ind_deco_fin_ult1</th>\n",
       "      <th>ind_deme_fin_ult1</th>\n",
       "      <th>ind_dela_fin_ult1</th>\n",
       "      <th>ind_ecue_fin_ult1</th>\n",
       "      <th>ind_fond_fin_ult1</th>\n",
       "      <th>ind_hip_fin_ult1</th>\n",
       "      <th>ind_plan_fin_ult1</th>\n",
       "      <th>ind_pres_fin_ult1</th>\n",
       "      <th>ind_reca_fin_ult1</th>\n",
       "      <th>ind_tjcr_fin_ult1</th>\n",
       "      <th>ind_valo_fin_ult1</th>\n",
       "      <th>ind_viv_fin_ult1</th>\n",
       "      <th>ind_nomina_ult1</th>\n",
       "      <th>ind_nom_pens_ult1</th>\n",
       "      <th>ind_recibo_ult1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1375586</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>H</td>\n",
       "      <td>35</td>\n",
       "      <td>2015-01-12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KHL</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>MALAGA</td>\n",
       "      <td>1.0</td>\n",
       "      <td>87218.10</td>\n",
       "      <td>02 - PARTICULARES</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050611</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>CIUDAD REAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35548.74</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050612</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>CIUDAD REAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122179.11</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050613</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>H</td>\n",
       "      <td>22</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KHD</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>ZARAGOZA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119775.54</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050614</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>ZARAGOZA</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fecha_dato  ncodpers ind_empleado pais_residencia sexo  age  fecha_alta  \\\n",
       "0  2015-01-28   1375586            N              ES    H   35  2015-01-12   \n",
       "1  2015-01-28   1050611            N              ES    V   23  2012-08-10   \n",
       "2  2015-01-28   1050612            N              ES    V   23  2012-08-10   \n",
       "3  2015-01-28   1050613            N              ES    H   22  2012-08-10   \n",
       "4  2015-01-28   1050614            N              ES    V   23  2012-08-10   \n",
       "\n",
       "   ind_nuevo antiguedad  indrel ult_fec_cli_1t indrel_1mes tiprel_1mes  \\\n",
       "0        0.0          6     1.0            NaN         1.0           A   \n",
       "1        0.0         35     1.0            NaN         1.0           I   \n",
       "2        0.0         35     1.0            NaN         1.0           I   \n",
       "3        0.0         35     1.0            NaN         1.0           I   \n",
       "4        0.0         35     1.0            NaN         1.0           A   \n",
       "\n",
       "  indresi indext conyuemp canal_entrada indfall  tipodom  cod_prov  \\\n",
       "0       S      N      NaN           KHL       N      1.0      29.0   \n",
       "1       S      S      NaN           KHE       N      1.0      13.0   \n",
       "2       S      N      NaN           KHE       N      1.0      13.0   \n",
       "3       S      N      NaN           KHD       N      1.0      50.0   \n",
       "4       S      N      NaN           KHE       N      1.0      50.0   \n",
       "\n",
       "       nomprov  ind_actividad_cliente      renta            segmento  \\\n",
       "0       MALAGA                    1.0   87218.10   02 - PARTICULARES   \n",
       "1  CIUDAD REAL                    0.0   35548.74  03 - UNIVERSITARIO   \n",
       "2  CIUDAD REAL                    0.0  122179.11  03 - UNIVERSITARIO   \n",
       "3     ZARAGOZA                    0.0  119775.54  03 - UNIVERSITARIO   \n",
       "4     ZARAGOZA                    1.0        NaN  03 - UNIVERSITARIO   \n",
       "\n",
       "   ind_ahor_fin_ult1  ind_aval_fin_ult1  ind_cco_fin_ult1  ind_cder_fin_ult1  \\\n",
       "0                  0                  0                 1                  0   \n",
       "1                  0                  0                 1                  0   \n",
       "2                  0                  0                 1                  0   \n",
       "3                  0                  0                 0                  0   \n",
       "4                  0                  0                 1                  0   \n",
       "\n",
       "   ind_cno_fin_ult1  ind_ctju_fin_ult1  ind_ctma_fin_ult1  ind_ctop_fin_ult1  \\\n",
       "0                 0                  0                  0                  0   \n",
       "1                 0                  0                  0                  0   \n",
       "2                 0                  0                  0                  0   \n",
       "3                 0                  0                  0                  0   \n",
       "4                 0                  0                  0                  0   \n",
       "\n",
       "   ind_ctpp_fin_ult1  ind_deco_fin_ult1  ind_deme_fin_ult1  ind_dela_fin_ult1  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  0                  0                  0                  0   \n",
       "2                  0                  0                  0                  0   \n",
       "3                  0                  1                  0                  0   \n",
       "4                  0                  0                  0                  0   \n",
       "\n",
       "   ind_ecue_fin_ult1  ind_fond_fin_ult1  ind_hip_fin_ult1  ind_plan_fin_ult1  \\\n",
       "0                  0                  0                 0                  0   \n",
       "1                  0                  0                 0                  0   \n",
       "2                  0                  0                 0                  0   \n",
       "3                  0                  0                 0                  0   \n",
       "4                  0                  0                 0                  0   \n",
       "\n",
       "   ind_pres_fin_ult1  ind_reca_fin_ult1  ind_tjcr_fin_ult1  ind_valo_fin_ult1  \\\n",
       "0                  0                  0                  0                  0   \n",
       "1                  0                  0                  0                  0   \n",
       "2                  0                  0                  0                  0   \n",
       "3                  0                  0                  0                  0   \n",
       "4                  0                  0                  0                  0   \n",
       "\n",
       "   ind_viv_fin_ult1  ind_nomina_ult1  ind_nom_pens_ult1  ind_recibo_ult1  \n",
       "0                 0              0.0                0.0                0  \n",
       "1                 0              0.0                0.0                0  \n",
       "2                 0              0.0                0.0                0  \n",
       "3                 0              0.0                0.0                0  \n",
       "4                 0              0.0                0.0                0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_Data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c6eb64ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Date', 'Customer_code', 'Employee_index', 'Country', 'Gender', 'Age',\n",
      "       'Customer_join_date', 'Customer_index', 'Customer_seniority',\n",
      "       'primary_customer', 'Customer_leave_date', 'Customer_type',\n",
      "       'Customer_relation', 'Residence_index', 'Foreigner_index',\n",
      "       'Spouse_index', 'Channel', 'Deceased_index', 'Primary_Address',\n",
      "       'Customer_address', 'province_name', 'Activity_index', 'Gross_income',\n",
      "       'Segmentation', 'Saving_account', 'Guarantees', 'Current_accounts',\n",
      "       'Derivative_account', 'Payroll_account', 'Junior_account',\n",
      "       'More_private_account', 'Private_account', 'Private_plus_account',\n",
      "       'Short_term_deposits', 'Medium_term_deposits', 'Long_term_deposits',\n",
      "       'E_Account', 'Funds', 'Mortgage', 'Pensions', 'Loans', 'Taxes',\n",
      "       'Credit_card', 'Securities', 'Home_account', 'Payroll', 'Pensions_2',\n",
      "       'Direct_debit'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "Train_Data.rename(columns={\n",
    "        'fecha_dato': 'Date',\n",
    "        'ncodpers': 'Customer_code',\n",
    "        'ind_empleado': 'Employee_index',\n",
    "        'pais_residencia': 'Country',\n",
    "        'sexo': 'Gender',\n",
    "        'age': 'Age',\n",
    "        'fecha_alta': 'Customer_join_date',\n",
    "        'ind_nuevo': 'Customer_index',\n",
    "        'antiguedad': 'Customer_seniority',\n",
    "        'indrel': 'primary_customer',\n",
    "        'ult_fec_cli_1t': 'Customer_leave_date',\n",
    "        'indrel_1mes': 'Customer_type',\n",
    "        'tiprel_1mes': 'Customer_relation',\n",
    "        'indresi': 'Residence_index',\n",
    "        'indext': 'Foreigner_index',\n",
    "        'conyuemp': 'Spouse_index',\n",
    "        'canal_entrada': 'Channel',\n",
    "        'indfall': 'Deceased_index',\n",
    "        'tipodom': 'Primary_Address',\n",
    "        'cod_prov': 'Customer_address',\n",
    "        'nomprov': 'province_name',\n",
    "        'ind_actividad_cliente': 'Activity_index',\n",
    "        'renta': 'Gross_income',\n",
    "        'segmento': 'Segmentation',\n",
    "        'ind_ahor_fin_ult1': 'Saving_account',\n",
    "        'ind_aval_fin_ult1': 'Guarantees',\n",
    "        'ind_cco_fin_ult1': 'Current_accounts',\n",
    "        'ind_cder_fin_ult1': 'Derivative_account',\n",
    "        'ind_cno_fin_ult1': 'Payroll_account',\n",
    "        'ind_ctju_fin_ult1': 'Junior_account',\n",
    "        'ind_ctma_fin_ult1': 'More_private_account',\n",
    "        'ind_ctop_fin_ult1': 'Private_account',\n",
    "        'ind_ctpp_fin_ult1': 'Private_plus_account',\n",
    "        'ind_deco_fin_ult1': 'Short_term_deposits',\n",
    "        'ind_deme_fin_ult1': 'Medium_term_deposits',\n",
    "        'ind_dela_fin_ult1': 'Long_term_deposits',\n",
    "        'ind_ecue_fin_ult1': 'E_Account',\n",
    "        'ind_fond_fin_ult1': 'Funds',\n",
    "        'ind_hip_fin_ult1': 'Mortgage',\n",
    "        'ind_plan_fin_ult1': 'Pensions',\n",
    "        'ind_pres_fin_ult1': 'Loans',\n",
    "        'ind_reca_fin_ult1': 'Taxes',\n",
    "        'ind_tjcr_fin_ult1': 'Credit_card',\n",
    "        'ind_valo_fin_ult1': 'Securities',\n",
    "        'ind_viv_fin_ult1': 'Home_account',\n",
    "        'ind_nomina_ult1': 'Payroll',\n",
    "        'ind_nom_pens_ult1': 'Pensions_2',\n",
    "        'ind_recibo_ult1': 'Direct_debit'\n",
    "    }, inplace=True)\n",
    "print(Train_Data.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b74a985e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date                           0\n",
      "Customer_code                  0\n",
      "Employee_index             27734\n",
      "Country                    27734\n",
      "Gender                     27804\n",
      "Age                            0\n",
      "Customer_join_date         27734\n",
      "Customer_index             27734\n",
      "Customer_seniority             0\n",
      "primary_customer           27734\n",
      "Customer_leave_date     13622516\n",
      "Customer_type             149781\n",
      "Customer_relation         149781\n",
      "Residence_index            27734\n",
      "Foreigner_index            27734\n",
      "Spouse_index            13645501\n",
      "Channel                   186126\n",
      "Deceased_index             27734\n",
      "Primary_Address            27735\n",
      "Customer_address           93591\n",
      "province_name              93591\n",
      "Activity_index             27734\n",
      "Gross_income             2794375\n",
      "Segmentation              189368\n",
      "Saving_account                 0\n",
      "Guarantees                     0\n",
      "Current_accounts               0\n",
      "Derivative_account             0\n",
      "Payroll_account                0\n",
      "Junior_account                 0\n",
      "More_private_account           0\n",
      "Private_account                0\n",
      "Private_plus_account           0\n",
      "Short_term_deposits            0\n",
      "Medium_term_deposits           0\n",
      "Long_term_deposits             0\n",
      "E_Account                      0\n",
      "Funds                          0\n",
      "Mortgage                       0\n",
      "Pensions                       0\n",
      "Loans                          0\n",
      "Taxes                          0\n",
      "Credit_card                    0\n",
      "Securities                     0\n",
      "Home_account                   0\n",
      "Payroll                    16063\n",
      "Pensions_2                 16063\n",
      "Direct_debit                   0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(Train_Data.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "34152f81",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replace null values in Employee_index with 0\n",
    "mode_value = Train_Data[\"Employee_index\"].mode()[0]\n",
    "Train_Data[\"Employee_index\"].fillna(mode_value, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3abdfb1b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Replace null values in Country by imputing\n",
    "Train_Data[\"Country\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "cadb456d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Gender by imputing\n",
    "Train_Data[\"Gender\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f069e837",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_join_date by imputing\n",
    "Train_Data[\"Customer_join_date\"] = pd.to_datetime(Train_Data[\"Customer_join_date\"])\n",
    "Train_Data[\"Customer_join_date\"].ffill(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c0ea2cff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_index by imputing\n",
    "Train_Data[\"Customer_index\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d9768e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_index by imputing\n",
    "Train_Data[\"primary_customer\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "203cf468",
   "metadata": {},
   "outputs": [],
   "source": [
    "mode_value = Train_Data[\"Customer_address\"].mode()[0]\n",
    "Train_Data[\"Customer_address\"].fillna(mode_value, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6e663581",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_type by imputing\n",
    "Train_Data[\"Customer_type\"].fillna(method=\"ffill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "50be0e9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_relation by imputing\n",
    "Train_Data[\"Customer_relation\"].fillna(method=\"ffill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "76de6428",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Residence_index by imputing\n",
    "Train_Data[\"Residence_index\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "827f8efb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Foreigner_index by imputing\n",
    "Train_Data[\"Foreigner_index\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "456ed5f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Spouse_index by imputing\n",
    "Train_Data[\"Spouse_index\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2d351c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Channel by imputing\n",
    "Train_Data[\"Channel\"].fillna(method=\"ffill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fa4b1c4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Customer_leave_date with 0\n",
    "mode_value = Train_Data[\"Customer_leave_date\"].mode()[0]\n",
    "Train_Data[\"Customer_leave_date\"].fillna(mode_value, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "96cba082",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Primary_Address by imputing\n",
    "Train_Data[\"Primary_Address\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "5bd6a599",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Deceased_index with 0\n",
    "mode_value = Train_Data[\"Deceased_index\"].mode()[0]\n",
    "Train_Data[\"Deceased_index\"].fillna(mode_value, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "87258ef7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in province_name by imputing\n",
    "Train_Data[\"province_name\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "977a6d14",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Activity by imputing\n",
    "Train_Data[\"Activity_index\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e8afbcf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Gross_income by imputing\n",
    "Train_Data[\"Gross_income\"].fillna(method=\"ffill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c6150fdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Segmentation by imputing\n",
    "Train_Data[\"Segmentation\"].fillna(method=\"ffill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "82a3b50f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values in Payroll by imputing\n",
    "Train_Data[\"Payroll\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "93b8bd6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing null values Pensions_2 by imputing\n",
    "Train_Data[\"Pensions_2\"].fillna(method=\"bfill\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "1a51b1b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date                    0\n",
      "Customer_code           0\n",
      "Employee_index          0\n",
      "Country                 0\n",
      "Gender                  0\n",
      "Age                     0\n",
      "Customer_join_date      0\n",
      "Customer_index          0\n",
      "Customer_seniority      0\n",
      "primary_customer        0\n",
      "Customer_leave_date     0\n",
      "Customer_type           0\n",
      "Customer_relation       0\n",
      "Residence_index         0\n",
      "Foreigner_index         0\n",
      "Spouse_index            0\n",
      "Channel                 0\n",
      "Deceased_index          0\n",
      "Primary_Address         0\n",
      "Customer_address        0\n",
      "province_name           0\n",
      "Activity_index          0\n",
      "Gross_income            0\n",
      "Segmentation            0\n",
      "Saving_account          0\n",
      "Guarantees              0\n",
      "Current_accounts        0\n",
      "Derivative_account      0\n",
      "Payroll_account         0\n",
      "Junior_account          0\n",
      "More_private_account    0\n",
      "Private_account         0\n",
      "Private_plus_account    0\n",
      "Short_term_deposits     0\n",
      "Medium_term_deposits    0\n",
      "Long_term_deposits      0\n",
      "E_Account               0\n",
      "Funds                   0\n",
      "Mortgage                0\n",
      "Pensions                0\n",
      "Loans                   0\n",
      "Taxes                   0\n",
      "Credit_card             0\n",
      "Securities              0\n",
      "Home_account            0\n",
      "Payroll                 0\n",
      "Pensions_2              0\n",
      "Direct_debit            0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#checking is above methods are applied to the file\n",
    "print(Train_Data.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e0f1d3e",
   "metadata": {},
   "source": [
    "# Detecting and Treating Outliers for column Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "fc1fcbb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "object\n"
     ]
    }
   ],
   "source": [
    "#checking the data type of column Age\n",
    "print(Train_Data['Age'].dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "58f8d463",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace 'NA' with NaN\n",
    "Train_Data['Age'] = Train_Data['Age'].replace(' NA', pd.NaT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "999def5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fill missing values with median age\n",
    "median_age = Train_Data['Age'].median()\n",
    "Train_Data['Age'] = Train_Data['Age'].fillna(median_age)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "43a43f43",
   "metadata": {},
   "outputs": [],
   "source": [
    "Train_Data['Age'] = Train_Data['Age'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "521322f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the Age column in the Train_Data \n",
    "sns.boxplot(x=Train_Data['Age'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "6c4568d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# find median age\n",
    "median_age = Train_Data['Age'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "f44f4314",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate lower and upper bounds for outliers\n",
    "q1 = Train_Data['Age'].quantile(0.25)\n",
    "q3 = Train_Data['Age'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - 1.5 * iqr\n",
    "upper_bound = q3 + 1.5 * iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "8d34b49d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace outliers with median age\n",
    "Train_Data.loc[Train_Data['Age'] < lower_bound, 'Age'] = median_age\n",
    "Train_Data.loc[Train_Data['Age'] > upper_bound, 'Age'] = median_age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b579435a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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N9wQd9xxR6fb//Wvf40PfOADMXPmzNixY0c89NBDsWHDhpg3b14tvhygGznFAH3IlClT4uMf/3gsWLAgjh8/HiNHjoxVq1bFe9/73li0aFH88pe/jCeffLK6/5e//OVYvHhx/POf/4yhQ4fGnDlzon///vH973+/us+GDRviyiuvjOeeey4qlUotviygG3gFAfqI3bt3x6ZNm+KTn/xkRETU19fHtddeG8uWLatunzhxYqfbTJo0qdPn27dvj+XLl8egQYOqH1dffXV0dHTEvn37euYLAXpEfa0HAHrGsmXL4vjx453elFhKiYaGhvjOd75zWvdx9OjRuOGGG2L+/PlpW0tLyxmbFag9gQB9wPHjx+PHP/5xfOMb34j3v//9nbbNmDEjHnzwwRgzZkz86le/6rRt8+bNnT6/+OKLY9euXfGOd7yj22cGast7EKAPePTRR+Paa6+Nw4cPR1NTU6dtt912W6xbty5WrlwZY8aMiZtvvjk+85nPxLZt2+LWW2+Nv/3tb3HkyJFoamqKHTt2xGWXXRbXX399zJkzJ970pjfFrl27Ys2aNaf9KgTw+uA9CNAHLFu2LKZOnZriICJi5syZsWXLlmhra4uf/exn8fDDD8e4cePinnvuqf4UQ0NDQ0REjBs3LtavXx979uyJK664IsaPHx933XWX/0sB3oC8ggCc0uLFi+Pee++N/fv313oUoId5DwJQ9b3vfS8mTpwYw4YNi9/97ndx9913+z8OoI8SCEDV3r1742tf+1o8++yz0dLSErfeemvcfvvttR4LqAGnGACAxJsUAYBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQPI/M1GcZ3T0SnIAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the Age column after treated outliers \n",
    "sns.boxplot(x=Train_Data['Age'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56c354c3",
   "metadata": {},
   "source": [
    "# Detecting and Treating outliers in column Gross_income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "81178d9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Gross_ income\n",
    "sns.boxplot(x=Train_Data['Gross_income'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "5c0fd6fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find median Gross_income\n",
    "median_income = Train_Data['Gross_income'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "faee7ff4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate lower and upper bounds for outliers\n",
    "q1 = Train_Data['Gross_income'].quantile(0.25)\n",
    "q3 = Train_Data['Gross_income'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - 1.5 * iqr\n",
    "upper_bound = q3 + 1.5 * iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "498a1a33",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace outliers with median age\n",
    "Train_Data.loc[Train_Data['Gross_income'] < lower_bound, 'Gross_income'] = median_income\n",
    "Train_Data.loc[Train_Data['Gross_income'] > upper_bound, 'Gross_income'] = median_income"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "76416c04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Gross_ income after treated outliers in the Train_Data\n",
    "sns.boxplot(x=Train_Data['Gross_income'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c930f69e",
   "metadata": {},
   "source": [
    "# Detecting and treating outliers in Customer_seniority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "9696c03a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int32\n"
     ]
    }
   ],
   "source": [
    "#checking the data type of column Customer_seniority\n",
    "print(Train_Data['Customer_seniority'].dtype)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "82630326",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Replacing NA str with NaT \n",
    "Train_Data['Customer_seniority'] = Train_Data['Customer_seniority'].replace('     NA', pd.NaT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "6d4e57ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#replacing Nat with NaN\n",
    "Train_Data['Customer_seniority'].replace(to_replace=pd.NaT, value=np.nan, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "8d9af6a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace NaN with 0\n",
    "Train_Data['Customer_seniority'] = Train_Data['Customer_seniority'].fillna(0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "d89566a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Gross_ income\n",
    "sns.boxplot(x=Train_Data['Customer_seniority'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "409f9e80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find median Customer_seniority\n",
    "median_CS = Train_Data['Customer_seniority'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "0e40961a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate lower and upper bounds for outliers\n",
    "q1 = Train_Data['Customer_seniority'].quantile(0.25)\n",
    "q3 = Train_Data['Customer_seniority'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - 1.5 * iqr\n",
    "upper_bound = q3 + 1.5 * iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e2ac1573",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace outliers with median Customer seniority\n",
    "Train_Data.loc[Train_Data['Customer_seniority'] < lower_bound, 'Customer_seniority'] = median_CS\n",
    "Train_Data.loc[Train_Data['Customer_seniority'] > upper_bound, 'Customer_seniority'] = median_CS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "86481f60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Customer_seniority after treated outliers in the Train_Data\n",
    "sns.boxplot(x=Train_Data['Customer_seniority'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3b79d29",
   "metadata": {},
   "source": [
    "# Detecting and treating outliers for Pensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "6e1af938",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAGwCAYAAADMjZ3mAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAVsElEQVR4nO3de2yV9f3A8U+5lUst1TmBSnGbyESmSOZA5Q9jJBOigss2F+KNZRsyMWQJGCW64YyLc2KUGLdkF9GZbTqN2cymMwvKdFh1kiBVwKBTpiIwL1zMpCj9/v5YOD/rpzDGemhrX6/khPY536fP9/nmQN+c85ycmlJKCQCAD+nT1RMAALofgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACApN+B7tjW1hYbN26MQw45JGpqajpzTgBAlZRSYseOHdHY2Bh9+uz9eYIDDoSNGzdGU1PTge4OAHShV199NUaOHLnX+w84EA455JDKAerr6w/0xwAAB9H27dujqamp8nt8bw44EPa8rFBfXy8QAKCH+U+XB7hIEQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACQCAQBIBAIAkAgEACARCABAIhAAgEQgAACJQAAAEoEAACT9unoCQPdSSomdO3dGRMTAgQOjpqami2cEdAXPIADt7Ny5M6ZNmxbTpk2rhALQ+wgEoJ0PR4FAgN5LIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQgHba2to6/BroXQQC0M727ds7/BroXQQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJD029+Bra2t0draWvl++/btVZkQAND19vsZhOuvvz6GDh1auTU1NVVzXgBAF9rvQFi4cGFs27atcnv11VerOS8AoAvt90sMtbW1UVtbW825AADdhIsUAYBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAAAiUAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQgHbq6+s7/BroXQQC0E6fPn06/BroXfztBwASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAA7QwcOLDDr4HepV9XTwDoXgYOHBgPPfRQ5WugdxIIQDs1NTUxaNCgrp4G0MW8xAAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJP0OdMdSSkREbN++vdMmAwBU157f23t+j+/NAQfCjh07IiKiqanpQH8EANBFduzYEUOHDt3r/TXlPyXEXrS1tcXGjRvjkEMOiZqamgOe4MfB9u3bo6mpKV599dWor6/v6ul8rFnrg8M6HxzW+eCwzu2VUmLHjh3R2NgYffrs/UqDA34GoU+fPjFy5MgD3f1jqb6+3oPvILHWB4d1Pjis88Fhnf/fvp452MNFigBAIhAAgEQgdILa2tpYtGhR1NbWdvVUPvas9cFhnQ8O63xwWOcDc8AXKQIAH1+eQQAAEoEAACQCAQBIBAIAkAiE/fT222/H+eefH/X19dHQ0BDf+MY34t13393nPjt37oy5c+fGJz7xiairq4svf/nLsXnz5g7HvvXWWzFy5MioqamJrVu3VuEMeoZqrPOzzz4bM2fOjKamphg0aFCMHTs2lixZUu1T6VZuu+22+NSnPhUDBw6MSZMmxdNPP73P8ffee28ce+yxMXDgwDj++OPjwQcfbHd/KSW+973vxYgRI2LQoEExZcqUWL9+fTVPocfozLV+//3344orrojjjz8+hgwZEo2NjXHRRRfFxo0bq30a3V5nP6Y/bM6cOVFTUxO33HJLJ8+6hynsl6lTp5bx48eXJ598sjz++ONl9OjRZebMmfvcZ86cOaWpqaksW7asPPPMM+Xkk08up556aodjZ8yYUaZNm1YiorzzzjtVOIOeoRrr/Itf/KLMmzevLF++vLz00kvlrrvuKoMGDSq33nprtU+nW7j77rvLgAEDyu23316ef/758q1vfas0NDSUzZs3dzh+xYoVpW/fvuVHP/pRWbNmTbn66qtL//79S0tLS2XMD3/4wzJ06NDyu9/9rjz77LNl+vTp5dOf/nR57733DtZpdUudvdZbt24tU6ZMKffcc09Zt25daW5uLhMnTiyf//znD+ZpdTvVeEzvcf/995fx48eXxsbGcvPNN1f5TLo3gbAf1qxZUyKi/O1vf6tse+ihh0pNTU15/fXXO9xn69atpX///uXee++tbFu7dm2JiNLc3Nxu7I9//ONy2mmnlWXLlvXqQKj2On/YpZdeWk4//fTOm3w3NnHixDJ37tzK97t37y6NjY3l+uuv73D8eeedV84666x22yZNmlQuueSSUkopbW1tZfjw4eXGG2+s3L9169ZSW1tbfvOb31ThDHqOzl7rjjz99NMlIsqGDRs6Z9I9ULXW+bXXXitHHnlkee6558pRRx3V6wPBSwz7obm5ORoaGuKkk06qbJsyZUr06dMnnnrqqQ73WblyZbz//vsxZcqUyrZjjz02Ro0aFc3NzZVta9asiWuvvTZ++ctf7vNDM3qDaq7zR23bti0OO+ywzpt8N7Vr165YuXJlu/Xp06dPTJkyZa/r09zc3G58RMSZZ55ZGf/yyy/Hpk2b2o0ZOnRoTJo0aZ9r/nFXjbXuyLZt26KmpiYaGho6Zd49TbXWua2tLS688MK4/PLLY9y4cdWZfA/Tu38j7adNmzbFEUcc0W5bv3794rDDDotNmzbtdZ8BAwakv8TDhg2r7NPa2hozZ86MG2+8MUaNGlWVufck1Vrnj3riiSfinnvuidmzZ3fKvLuzN998M3bv3h3Dhg1rt31f67Np06Z9jt/z53/zM3uDaqz1R+3cuTOuuOKKmDlzZq/90KFqrfMNN9wQ/fr1i3nz5nX+pHuoXh0IV155ZdTU1Ozztm7duqodf+HChTF27Ni44IILqnaM7qCr1/nDnnvuuZgxY0YsWrQovvjFLx6UY0JneP/99+O8886LUkr85Cc/6erpfKysXLkylixZEnfccUfU1NR09XS6jQP+uOePg/nz58esWbP2OeYzn/lMDB8+PLZs2dJu+wcffBBvv/12DB8+vMP9hg8fHrt27YqtW7e2+9/t5s2bK/s88sgj0dLSEvfdd19E/PvK8IiIww8/PK666qr4/ve/f4Bn1r109TrvsWbNmjjjjDNi9uzZcfXVVx/QufQ0hx9+ePTt2ze9e6aj9dlj+PDh+xy/58/NmzfHiBEj2o058cQTO3H2PUs11nqPPXGwYcOGeOSRR3rtswcR1Vnnxx9/PLZs2dLumdzdu3fH/Pnz45ZbbolXXnmlc0+ip+jqiyB6gj0Xzz3zzDOVbQ8//PB+XTx33333VbatW7eu3cVzL774Ymlpaancbr/99hIR5Yknntjr1bgfZ9Va51JKee6558oRRxxRLr/88uqdQDc1ceLEctlll1W+3717dznyyCP3eUHX2Wef3W7bKaecki5SXLx4ceX+bdu2uUixdP5al1LKrl27yrnnnlvGjRtXtmzZUp2J9zCdvc5vvvlmu3+LW1paSmNjY7niiivKunXrqnci3ZxA2E9Tp04tEyZMKE899VT561//Wo455ph2b7977bXXymc/+9ny1FNPVbbNmTOnjBo1qjzyyCPlmWeeKaeccko55ZRT9nqMRx99tFe/i6GU6qxzS0tL+eQnP1kuuOCC8sYbb1RuveUf27vvvrvU1taWO+64o6xZs6bMnj27NDQ0lE2bNpVSSrnwwgvLlVdeWRm/YsWK0q9fv7J48eKydu3asmjRog7f5tjQ0FB+//vfl9WrV5cZM2Z4m2Pp/LXetWtXmT59ehk5cmRZtWpVu8dva2trl5xjd1CNx/RHeReDQNhvb731Vpk5c2apq6sr9fX15etf/3rZsWNH5f6XX365RER59NFHK9vee++9cumll5ZDDz20DB48uHzpS18qb7zxxl6PIRCqs86LFi0qEZFuRx111EE8s6516623llGjRpUBAwaUiRMnlieffLJy32mnnVYuvvjiduN/+9vfljFjxpQBAwaUcePGlT/+8Y/t7m9rayvf/e53y7Bhw0ptbW0544wzygsvvHAwTqXb68y13vN47+j24b8DvVFnP6Y/SiCU4uOeAYCkV7+LAQDomEAAABKBAAAkAgEASAQCAJAIBAAgEQgAQCIQAIBEIAD7dM011/TqD2GC3kogQA8wa9asykdjDxgwIEaPHh3XXnttfPDBB1U/9oIFC2LZsmVVPw7QvfTqj3uGnmTq1KmxdOnSaG1tjQcffDDmzp0b/fv3j4ULF1b1uHV1dVFXV1fVYwDdj2cQoIeora2N4cOHx1FHHRXf/va3Y8qUKfHAAw9Ea2trLFiwII488sgYMmRITJo0KZYvX17Z74477oiGhoZ4+OGHY+zYsVFXVxdTp06NN954ozJm+fLlMXHixBgyZEg0NDTE5MmTY8OGDRGRX2Joa2uLa6+9NkaOHBm1tbVx4oknxp/+9KfK/a+88krU1NTE/fffH6effnoMHjw4xo8fH83NzZUxGzZsiHPOOScOPfTQGDJkSIwbNy4efPDB6i0e8F8TCNBDDRo0KHbt2hWXXXZZNDc3x9133x2rV6+Or371qzF16tRYv359Zey//vWvWLx4cdx1113x2GOPxT/+8Y9YsGBBRER88MEHce6558Zpp50Wq1evjubm5pg9e3bU1NR0eNwlS5bETTfdFIsXL47Vq1fHmWeeGdOnT293vIiIq666KhYsWBCrVq2KMWPGxMyZMysvicydOzdaW1vjsccei5aWlrjhhhs8SwHdTVd/nCTwn1188cVlxowZpZR/f9Tyn//851JbW1tmzZpV+vbtW15//fV2488444yycOHCUkopS5cuLRFRXnzxxcr9t912Wxk2bFgp5d8fsR0RZfny5R0ee9GiRWX8+PGV7xsbG8sPfvCDdmO+8IUvlEsvvbSU8v8fUfzzn/+8cv/zzz9fIqKsXbu2lFLK8ccfX6655poDWAngYPEMAvQQf/jDH6Kuri4GDhwY06ZNi6997Wvxla98JXbv3h1jxoypXCtQV1cXf/nLX+Kll16q7Dt48OA4+uijK9+PGDEitmzZEhERhx12WMyaNSvOPPPMOOecc2LJkiXtXn74sO3bt8fGjRtj8uTJ7bZPnjw51q5d227bCSec0O54EVE55rx58+K6666LyZMnx6JFi2L16tX/w8oA1SAQoIc4/fTTY9WqVbF+/fp477334s4774x33303+vbtGytXroxVq1ZVbmvXro0lS5ZU9u3fv3+7n1VTUxOllMr3S5cujebm5jj11FPjnnvuiTFjxsSTTz75P833w8fc83JFW1tbRER885vfjL///e9x4YUXRktLS5x00klx6623/k/HAzqXQIAeYsiQITF69OgYNWpU9Ov37zcgTZgwIXbv3h1btmyJ0aNHt7sNHz78v/r5EyZMiIULF8YTTzwRn/vc5+LXv/51GlNfXx+NjY2xYsWKdttXrFgRxx133H91vKamppgzZ07cf//9MX/+/PjZz372X+0PVJe3OUIPNmbMmDj//PPjoosuiptuuikmTJgQ//znP2PZsmVxwgknxFlnnfUff8bLL78cP/3pT2P69OnR2NgYL7zwQqxfvz4uuuiiDsdffvnlsWjRojj66KPjxBNPjKVLl8aqVaviV7/61X7P+zvf+U5MmzYtxowZE++88048+uijMXbs2P3eH6g+gQA93NKlS+O6666L+fPnx+uvvx6HH354nHzyyXH22Wfv1/6DBw+OdevWxZ133hlvvfVWjBgxIubOnRuXXHJJh+PnzZsX27Zti/nz58eWLVviuOOOiwceeCCOOeaY/Z7z7t27Y+7cufHaa69FfX19TJ06NW6++eb93h+ovpry4RciAQDCNQgAQAcEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIPk/pQh3MZ48HXUAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Gross_ income\n",
    "sns.boxplot(x=Train_Data['Pensions'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "232a350a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find median Pensions\n",
    "median_pensions = Train_Data['Pensions'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f87d7d07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate lower and upper bounds for outliers\n",
    "q1 = Train_Data['Pensions'].quantile(0.25)\n",
    "q3 = Train_Data['Pensions'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - 1.5 * iqr\n",
    "upper_bound = q3 + 1.5 * iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "bd87406d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace outliers with median age\n",
    "Train_Data.loc[Train_Data['Pensions'] < lower_bound, 'Pensions'] = median_pensions\n",
    "Train_Data.loc[Train_Data['Pensions'] > upper_bound, 'Pensions'] = median_pensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "9227c3aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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+OGHY+zYsVFXVxdTp06NN954ozJm+fLlMXHixBgyZEg0NDTE5MmTY8OGDRGRX2Joa2uLa6+9NkaOHBm1tbVx4oknxp/+9KfK/a+88krU1NTE/fffH6effnoMHjw4xo8fH83NzZUxGzZsiHPOOScOPfTQGDJkSIwbNy4efPDB6i0e8F8TCNBDDRo0KHbt2hWXXXZZNDc3x9133x2rV6+Or371qzF16tRYv359Zey//vWvWLx4cdx1113x2GOPxT/+8Y9YsGBBRER88MEHce6558Zpp50Wq1evjubm5pg9e3bU1NR0eNwlS5bETTfdFIsXL47Vq1fHmWeeGdOnT293vIiIq666KhYsWBCrVq2KMWPGxMyZMysvicydOzdaW1vjsccei5aWlrjhhhs8SwHdTVd/nCTwn1188cVlxowZpZR/f9Tyn//851JbW1tmzZpV+vbtW15//fV2488444yycOHCUkopS5cuLRFRXnzxxcr9t912Wxk2bFgp5d8fsR0RZfny5R0ee9GiRWX8+PGV7xsbG8sPfvCDdmO+8IUvlEsvvbSU8v8fUfzzn/+8cv/zzz9fIqKsXbu2lFLK8ccfX6655poDWAngYPEMAvQQf/jDH6Kuri4GDhwY06ZNi6997Wvxla98JXbv3h1jxoypXCtQV1cXf/nLX+Kll16q7Dt48OA4+uijK9+PGDEitmzZEhERhx12WMyaNSvOPPPMOOecc2LJkiXtXn74sO3bt8fGjRtj8uTJ7bZPnjw51q5d227bCSec0O54EVE55rx58+K6666LyZMnx6JFi2L16tX/w8oA1SAQoIc4/fTTY9WqVbF+/fp477334s4774x33303+vbtGytXroxVq1ZVbmvXro0lS5ZU9u3fv3+7n1VTUxOllMr3S5cujebm5jj11FPjnnvuiTFjxsSTTz75P833w8fc83JFW1tbRER885vfjL///e9x4YUXRktLS5x00klx6623/k/HAzqXQIAeYsiQITF69OgYNWpU9Ov37zcgTZgwIXbv3h1btmyJ0aNHt7sNHz78v/r5EyZMiIULF8YTTzwRn/vc5+LXv/51GlNfXx+NjY2xYsWKdttXrFgRxx133H91vKamppgzZ07cf//9MX/+/PjZz372X+0PVJe3OUIPNmbMmDj//PPjoosuiptuuikmTJgQ//znP2PZsmVxwgknxFlnnfUff8bLL78cP/3pT2P69OnR2NgYL7zwQqxfvz4uuuiiDsdffvnlsWjRojj66KPjxBNPjKVLl8aqVaviV7/61X7P+zvf+U5MmzYtxowZE++88048+uijMXbs2P3eH6g+gQA93NKlS+O6666L+fPnx+uvvx6HH354nHzyyXH22Wfv1/6DBw+OdevWxZ133hlvvfVWjBgxIubOnRuXXHJJh+PnzZsX27Zti/nz58eWLVviuOOOiwceeCCOOeaY/Z7z7t27Y+7cufHaa69FfX19TJ06NW6++eb93h+ovpry4RciAQDCNQgAQAcEAgCQCAQAIBEIAEAiEACARCAAAIlAAAASgQAAJAIBAEgEAgCQCAQAIPk/pQh3MZ48HXUAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#display a box plot of the column Pensions after treated outliers in the Train_Data\n",
    "sns.boxplot(x=Train_Data['Pensions'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "48ca7601",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Saving cleaned data\n",
    "data = Train_Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "d16d33a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13647309, 48)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "72b53850",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Customer_code</th>\n",
       "      <th>Employee_index</th>\n",
       "      <th>Country</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Customer_join_date</th>\n",
       "      <th>Customer_index</th>\n",
       "      <th>Customer_seniority</th>\n",
       "      <th>primary_customer</th>\n",
       "      <th>Customer_leave_date</th>\n",
       "      <th>Customer_type</th>\n",
       "      <th>Customer_relation</th>\n",
       "      <th>Residence_index</th>\n",
       "      <th>Foreigner_index</th>\n",
       "      <th>Spouse_index</th>\n",
       "      <th>Channel</th>\n",
       "      <th>Deceased_index</th>\n",
       "      <th>Primary_Address</th>\n",
       "      <th>Customer_address</th>\n",
       "      <th>province_name</th>\n",
       "      <th>Activity_index</th>\n",
       "      <th>Gross_income</th>\n",
       "      <th>Segmentation</th>\n",
       "      <th>Saving_account</th>\n",
       "      <th>Guarantees</th>\n",
       "      <th>Current_accounts</th>\n",
       "      <th>Derivative_account</th>\n",
       "      <th>Payroll_account</th>\n",
       "      <th>Junior_account</th>\n",
       "      <th>More_private_account</th>\n",
       "      <th>Private_account</th>\n",
       "      <th>Private_plus_account</th>\n",
       "      <th>Short_term_deposits</th>\n",
       "      <th>Medium_term_deposits</th>\n",
       "      <th>Long_term_deposits</th>\n",
       "      <th>E_Account</th>\n",
       "      <th>Funds</th>\n",
       "      <th>Mortgage</th>\n",
       "      <th>Pensions</th>\n",
       "      <th>Loans</th>\n",
       "      <th>Taxes</th>\n",
       "      <th>Credit_card</th>\n",
       "      <th>Securities</th>\n",
       "      <th>Home_account</th>\n",
       "      <th>Payroll</th>\n",
       "      <th>Pensions_2</th>\n",
       "      <th>Direct_debit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1375586</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>H</td>\n",
       "      <td>35</td>\n",
       "      <td>2015-01-12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2015-12-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>KHL</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>MALAGA</td>\n",
       "      <td>1.0</td>\n",
       "      <td>87218.10</td>\n",
       "      <td>02 - PARTICULARES</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050611</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2015-12-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>CIUDAD REAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35548.74</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050612</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2015-12-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>CIUDAD REAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122179.11</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050613</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>H</td>\n",
       "      <td>22</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2015-12-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>I</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>KHD</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>ZARAGOZA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>119775.54</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2015-01-28</td>\n",
       "      <td>1050614</td>\n",
       "      <td>N</td>\n",
       "      <td>ES</td>\n",
       "      <td>V</td>\n",
       "      <td>23</td>\n",
       "      <td>2012-08-10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2015-12-24</td>\n",
       "      <td>1.0</td>\n",
       "      <td>A</td>\n",
       "      <td>S</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>KHE</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>ZARAGOZA</td>\n",
       "      <td>1.0</td>\n",
       "      <td>119775.54</td>\n",
       "      <td>03 - UNIVERSITARIO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Customer_code Employee_index Country Gender  Age  \\\n",
       "0  2015-01-28        1375586              N      ES      H   35   \n",
       "1  2015-01-28        1050611              N      ES      V   23   \n",
       "2  2015-01-28        1050612              N      ES      V   23   \n",
       "3  2015-01-28        1050613              N      ES      H   22   \n",
       "4  2015-01-28        1050614              N      ES      V   23   \n",
       "\n",
       "  Customer_join_date  Customer_index  Customer_seniority  primary_customer  \\\n",
       "0         2015-01-12             0.0                  50               1.0   \n",
       "1         2012-08-10             0.0                  50               1.0   \n",
       "2         2012-08-10             0.0                  50               1.0   \n",
       "3         2012-08-10             0.0                  50               1.0   \n",
       "4         2012-08-10             0.0                  50               1.0   \n",
       "\n",
       "  Customer_leave_date Customer_type Customer_relation Residence_index  \\\n",
       "0          2015-12-24           1.0                 A               S   \n",
       "1          2015-12-24           1.0                 I               S   \n",
       "2          2015-12-24           1.0                 I               S   \n",
       "3          2015-12-24           1.0                 I               S   \n",
       "4          2015-12-24           1.0                 A               S   \n",
       "\n",
       "  Foreigner_index Spouse_index Channel Deceased_index  Primary_Address  \\\n",
       "0               N            N     KHL              N              1.0   \n",
       "1               S            N     KHE              N              1.0   \n",
       "2               N            N     KHE              N              1.0   \n",
       "3               N            N     KHD              N              1.0   \n",
       "4               N            N     KHE              N              1.0   \n",
       "\n",
       "   Customer_address province_name  Activity_index  Gross_income  \\\n",
       "0              29.0        MALAGA             1.0      87218.10   \n",
       "1              13.0   CIUDAD REAL             0.0      35548.74   \n",
       "2              13.0   CIUDAD REAL             0.0     122179.11   \n",
       "3              50.0      ZARAGOZA             0.0     119775.54   \n",
       "4              50.0      ZARAGOZA             1.0     119775.54   \n",
       "\n",
       "         Segmentation  Saving_account  Guarantees  Current_accounts  \\\n",
       "0   02 - PARTICULARES               0           0                 1   \n",
       "1  03 - UNIVERSITARIO               0           0                 1   \n",
       "2  03 - UNIVERSITARIO               0           0                 1   \n",
       "3  03 - UNIVERSITARIO               0           0                 0   \n",
       "4  03 - UNIVERSITARIO               0           0                 1   \n",
       "\n",
       "   Derivative_account  Payroll_account  Junior_account  More_private_account  \\\n",
       "0                   0                0               0                     0   \n",
       "1                   0                0               0                     0   \n",
       "2                   0                0               0                     0   \n",
       "3                   0                0               0                     0   \n",
       "4                   0                0               0                     0   \n",
       "\n",
       "   Private_account  Private_plus_account  Short_term_deposits  \\\n",
       "0                0                     0                    0   \n",
       "1                0                     0                    0   \n",
       "2                0                     0                    0   \n",
       "3                0                     0                    1   \n",
       "4                0                     0                    0   \n",
       "\n",
       "   Medium_term_deposits  Long_term_deposits  E_Account  Funds  Mortgage  \\\n",
       "0                     0                   0          0      0         0   \n",
       "1                     0                   0          0      0         0   \n",
       "2                     0                   0          0      0         0   \n",
       "3                     0                   0          0      0         0   \n",
       "4                     0                   0          0      0         0   \n",
       "\n",
       "   Pensions  Loans  Taxes  Credit_card  Securities  Home_account  Payroll  \\\n",
       "0         0      0      0            0           0             0      0.0   \n",
       "1         0      0      0            0           0             0      0.0   \n",
       "2         0      0      0            0           0             0      0.0   \n",
       "3         0      0      0            0           0             0      0.0   \n",
       "4         0      0      0            0           0             0      0.0   \n",
       "\n",
       "   Pensions_2  Direct_debit  \n",
       "0         0.0             0  \n",
       "1         0.0             0  \n",
       "2         0.0             0  \n",
       "3         0.0             0  \n",
       "4         0.0             0  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00ebe5d3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
